 - Conditional Variables:
 	- takes in a mutex lock
 	- temparily releases the lock, so that other thread can acquire it
 	
Dining-Philosophers:
 - All philosophers are thinking at first, whoever finsih thinking first gets to eat by picking up the forks
 - Once a philosopher finishes eating, it releases the forks and goes back to thinking 
 - Think -> Hungry -> Eat -> Think -> Hungry -> Eat

cycles = 2
p = (0,0,0,0,0)

forks_available = (t,t,t,t)
lock mutex
cond_t cond_var

dining(i):
	while p[i] < cycles:
		think()
		pickup_forks(i)
		eat()
		return_forks(i)
		p[i] += 1



	thread_exit(0)


pthread_create(p[0], dining)
pthread_create(p[1], dining)
pthread_create(p[2], dining)
pthread_create(p[3], dining)
pthread_create(p[4], dining)

for i = 0..4 in p:
	pthread_join(p[i])

return0

# while there is i in p0..4 such that p[i] < cycles:

# //forks_con = (c0,c1,c2,c3)
# //forks = (0,1,2,3,4)

pickup_forks(i):
	lock(mutex)
	while(!forks_available[i] && !forks_available[(i+1)%5]):
		cond_wait(cond_var, mutex)
	
	
	forks_available[i] = f
	forks_available[(i+1)%5] = f
	
	# eat()
	# return_forks(i)
	unlock(mutex)


	# //acquire(forks[i])
	# //acquire(forks[(i+1)%5])
	# //while(!forks_available[i] && !forks_available[(i+1)%5]):
	# //	cond_wait(forks_con[i], forks[i]);
	# //	cond_wait(forks_con[(i+1)%5], forks[(i+1)%5])
	
	# //unlock(forks[i])
	# //unlock(forks[(i+1)%5])
	
return_forks(i):
	lock(mutex);
	forks_available[i] = t
	forks_available[(i+1)%5] = t
	cond_signal(cond_var)
	unlock(mutex)
	
	think(i)
	
eat():
	sleep(1..3)

think():
	sleep(1..3)
	

	
	

	
